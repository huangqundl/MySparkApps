/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File
import java.nio.charset.Charset

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Time, Seconds, StreamingContext}
import org.apache.spark.storage.StorageLevel
import com.google.common.io.Files
import org.apache.spark.rdd.RDD

import org.apache.spark.Logging
import org.apache.log4j.{Level, Logger}

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 *
 * Usage: WordCountStream <hostname> <port>
 * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example org.apache.spark.examples.streaming.WordCountStream localhost 9999`
 */
object WordCountStream {
  def main(args: Array[String]) {
    if (args.length < 4) {
      System.err.println("Usage: WordCountStream <hostname> <port> <num_receiver> <batch-length>")
      System.exit(1)
    }

    StreamingExamples.setStreamingLogLevels()
    //val outputFile = new File(args(2))
    //if (outputFile.exists()) outputFile.delete()

    // Create the context with a 1 second batch size
    val sparkConf = new SparkConf().setAppName("WordCountStream")
    val ssc = new StreamingContext(sparkConf, Seconds(args(3).toInt))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.

    //create 5 streams
    val receivers = (0 to args(2).toInt-1).map(i => ssc.socketTextStream(args(0), args(1).toInt+i, StorageLevel.MEMORY_AND_DISK_SER))
    val unionedStreaming = ssc.union(receivers)  
    //val mapDstream = unionedStreaming.map(_._2)
    val words = unionedStreaming.flatMap(_.split(" "))

    //val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    //val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.foreachRDD((rdd: RDD[(String, Int)], time: Time) => {
      val counts = "Counts at time " + time + " " + rdd.collect().mkString("[", ", ", "]")
      //println(counts)
      //println("Appending to " + outputFile.getAbsolutePath)
      //Files.append(counts + "\n", outputFile, Charset.defaultCharset())
    })
    ssc.start()
    ssc.awaitTermination()
  }
}

object StreamingExamples extends Logging {

  /** Set reasonable logging levels for streaming if the user has not configured log4j. */
  def setStreamingLogLevels() {
    val log4jInitialized = Logger.getRootLogger.getAllAppenders.hasMoreElements
    if (!log4jInitialized) {
      // We first log something to initialize Spark's default logging, then we override the
      // logging level.
      logInfo("Setting log level to [WARN] for streaming example." +
        " To override add a custom log4j.properties to the classpath.")
      Logger.getRootLogger.setLevel(Level.WARN)
    }
  }
}
